{"version":3,"sources":["Components/navbar.jsx","Components/counter.jsx","Components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["navBar","totalCounters","Fragment","className","Counter","index","this","props","counter","value","children","formatCount","onClick","onIncrement","onDecrement","disabled","check","onReset","onDelete","id","onChangeName","Component","Counters","counters","length","onResetAll","map","key","Name","App","state","name","incrementBy","decrementBy","command","editname","handelIncrement","indexOf","setState","handelDecrement","handelChangeName","confirmChangeName","onNameEdit","event","target","handelDelete","counterId","confirmDelete","handelResetAll","confirmResetAll","handelReset","confirmReset","onSearch","onEnter","search","confirmEntery","insert","alert","onSearchEnter","toLowerCase","onIncChange","parseInt","onDecChange","onCommand","handelSave","axios","post","then","get","responseType","res","pdfBlob","Blob","data","type","saveAs","onEnterCommand","sortIt","help","sort","a","b","filterOut","startsWith","l","split","slice","c","stud","filter","includes","confirmAlert","title","message","style","autoFocus","placeholder","onChange","buttons","label","i","elm","document","getElementById","registor","onKeyDown","controler","onKeyUp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.86e046ea.chunk.js","sourcesContent":["import React from 'react';\r\nconst navBar= ({totalCounters})=>{\r\n    return ( \r\n        <React.Fragment> \r\n            <nav >\r\n                <h1 className=\"scrhndl\">\r\n                    SCORE HANDLER\r\n                </h1>\r\n            </nav>\r\n            <br/><br/><p>PARTICIPANTS:{\" \"}<b>{totalCounters}</b></p>\r\n        </React.Fragment>\r\n        );\r\n}\r\n\r\n \r\nexport default navBar;","import React, { Component } from 'react';\r\nclass Counter extends Component {\r\n    check(index){\r\n        if (this.props.counter.value === 0)\r\n            return 'disabled';\r\n        else\r\n            return '';\r\n    }\r\n    render() { \r\n        const{children,counter}=this.props\r\n        return(\r\n            <div className='contain-student'>\r\n                {children}\r\n                <h4>SCORE:{\" \"}{this.formatCount()}</h4>\r\n                <button className='green' onClick={\r\n                        ()=>this.props.onIncrement(counter)}>Increment</button>\r\n                <button className='apple' onClick={\r\n                        ()=>this.props.onDecrement(counter)}>Decrement</button>\r\n                <button className='yellow' disabled={this.check(counter)} onClick={\r\n                        ()=>this.props.onReset(counter)}>Reset</button>\r\n                <button className='red'  onClick={\r\n                        ()=>this.props.onDelete(counter.id)}>Remove</button>\r\n                <button className='teal'  onClick={\r\n                        ()=>this.props.onChangeName(counter)}>Edit Name</button>\r\n            </div >\r\n        );\r\n    }\r\n    \r\n    formatCount()\r\n    {\r\n        const{value}=this.props.counter;\r\n        return value===0?'Zero':value;\r\n    }\r\n    \r\n}\r\n \r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter'\r\nclass Counters extends Component {\r\n    check(){\r\n        if (this.props.counters.length === 0)\r\n            return 'disabled';\r\n        else\r\n            return '';\r\n    }\r\n    render() { \r\n        const {counters,onResetAll,onReset,onDelete,onIncrement,onDecrement,onChangeName}=this.props //object discturturing\r\n        return (\r\n            <div>\r\n                <button  className=\"red\" disabled={this.check()} onClick={onResetAll}>Reset All</button><br/><br/>\r\n                <h4>PARTICPANT(S):</h4>\r\n                {counters.map(counter => \r\n                    <Counter key={counter.id} \r\n                             counter={counter} \r\n                             onIncrement={onIncrement} \r\n                             onDecrement={onDecrement}\r\n                             onReset={onReset}\r\n                             onDelete={onDelete}\r\n                             onChangeName={onChangeName}>\r\n                             \r\n                        <h2>{counter.Name}</h2>\r\n                    </Counter>\r\n                )}\r\n            </div>\r\n          );\r\n    }\r\n    \r\n}\r\n \r\nexport default Counters;","import React, {Component} from 'react';\nimport NavBar from './Components/navbar';\nimport Counters from './Components/counters'\nimport {confirmAlert} from 'react-confirm-alert';\nimport axios from 'axios'\nimport {saveAs} from 'file-saver'\nclass App extends Component{\n  state = {  \n        counters:[],\n        name:'',\n        incrementBy:1,\n        decrementBy:1,\n        command:'',\n        editname:''\n    }\n    handelIncrement=(counter)=>\n    {\n        const counters=[...this.state.counters]\n        const index= counters.indexOf(counter)\n        counters[index]={...counter}\n        counters[index].value += this.state.incrementBy;\n        this.setState({counters})\n    }\n    handelDecrement=(counter)=>\n    {\n        const counters=[...this.state.counters]\n        const index= counters.indexOf(counter)\n        counters[index]={...counter}\n        counters[index].value -= this.state.decrementBy;\n        this.setState({counters})\n    }\n    handelChangeName=(counter)=>{\n      this.confirmChangeName(counter);\n    }\n    confirmChangeName(counter){\n      confirmAlert({\n        title: 'Name Editor',\n        message:[<div id=\"edt\" style={{'text-align':'left', 'color':'black'}}>\n                    <b>Current Name:{\" \"}</b>{counter.Name}<br/><br/>\n                    <label>Type <b>New Name</b> and hit ENTER</label> <br/>\n                    <input id=\"edtnm\" type='text' className='form-control' \n                      autoFocus={true} \n                      placeholder='New Name' \n                      onChange={this.onNameEdit}/>\n                       </div>\n                ],\n                buttons:[\n                {\n                  label:'Proceed',\n                  className:'green adj',\n                  onClick: ()=> {\n                    if(this.state.editname!==''){\n                        const counters=[...this.state.counters]\n                        const index= counters.indexOf(counter)\n                        counters[index].Name=this.state.editname\n                        this.setState({counters,editname:''})\n                    }\n                    else\n                      alert('Type a Name before Proceeding!!\\n\\nNo changes made')\n                  }\n                },\n                {\n                  label:'Cancel',\n                  className:'red adj',\n                  onClick: ()=>{return false}\n                }\n              ]\n      });\n    }\n    onNameEdit = (event)=>{ \n      this.setState({editname: event.target.value})\n    }\n    handelDelete=(counterId) =>\n    {\n        this.confirmDelete(counterId);\n    }\n    confirmDelete(counterId)\n    {\n      confirmAlert({\n              title: \"This will Delete this Record Permanently\",\n              message:\"Do you want to proceed?\",\n              buttons:[\n                {\n                  label:'YES',\n                  className:'green adj',\n                  onClick: ()=> {\n                        const counters=this.state.counters.filter(c => c.id !== counterId)\n                        this.setState({counters})\n                      }\n                },\n                {\n                  label:'No',\n                  className:'red adj',\n                  onClick: ()=>{return false}\n                }\n              ]\n            });\n    }\n    handelResetAll= () =>\n    {\n        this.confirmResetAll();\n    }\n    confirmResetAll()\n    {\n      confirmAlert({\n              title: \"Reset All will set all scores to 'Zero'\",\n              message:\"Do you want to proceed?\",\n              buttons:[\n                {\n                  label:'YES',\n                  className:'green adj',\n                  onClick: ()=> {\n                    const counters=this.state.counters.map(c =>{\n                        c.value=0\n                        return c\n                      }\n                    )\n                    this.setState({counters})\n                  }\n                },\n                {\n                  label:'No',\n                  className:'red adj',\n                  onClick: ()=>{return false}\n                }\n              ]\n            });\n    }\n    handelReset= (counter) =>\n    {\n        this.confirmReset(counter);\n    }\n    confirmReset(counter)\n    {\n      confirmAlert({\n              title: \"Reset will set the score to 'Zero'\",\n              message:\"Do you want to proceed?\",\n              buttons:[\n                {\n                  label:'YES',\n                  className:'green adj',\n                  onClick: ()=> {\n                    const counters=[...this.state.counters]\n                    const index= counters.indexOf(counter)\n                    counters[index]={...counter}\n                    counters[index].value=0;\n                    this.setState({counters})\n                  }\n                },\n                {\n                  label:'No',\n                  className:'red adj',\n                  onClick: ()=>{return false}\n                }\n              ]\n            });\n    }\n    onSearch = (event)=>{ \n      this.setState({name: event.target.value})\n    }\n    search(){\n      if(this.state.counters.length > 0){\n        for(let i=0;i<this.state.counters.length;i++){\n          if(this.state.name===this.state.counters[i].Name)\n            return true;\n        }\n      }\n      return false;\n    }\n    onEnter = (event) => {\n      if(event.key==='Enter')\n      {\n        if(this.state.name!==''){\n          if(!this.search())\n            this.insert();\n          else\n            this.confirmEntery();\n        }\n        else\n          alert(\"Type a Name before hitting 'ENTER'!!\")\n        event.target.value=''\n      }\n    }\n    onSearchEnter=(event)=>{\n        this.setState({command: event.target.value.toLowerCase()})\n    } \n    insert()\n    {\n      const counters=[...this.state.counters]\n      counters[counters.length]={id:this.state.counters.length, Name:this.state.name, value:0}\n      this.setState({counters});\n    }\n    confirmEntery()\n    {\n      confirmAlert({\n              title: \"'\"+this.state.name+\"' already Exist!!\",\n              message:\"Do you want duplicacy? 'NO' Recomended\",\n              buttons:[\n                {\n                  label:'YES',\n                  className:'green adj',\n                  onClick: ()=> {\n                    this.insert();\n                  }\n                },\n                {\n                  label:'No',\n                  className:'red adj',\n                  onClick: ()=>{return false}\n                }\n              ]\n            });\n    }\n  onIncChange=(event)=>{\n      this.setState({incrementBy:parseInt(event.target.value)})\n  }\n  onDecChange=(event)=>{\n      this.setState({decrementBy:parseInt(event.target.value)})\n  }\n  onCommand=(event)=>{\n    this.setState({command:event.target.value.toLowerCase()})\n  }\n  handelSave=()=>{\n    axios.post('/create-pdf',this.state.counters)\n      .then(\n        ()=>axios.get('/fetch-pdf',{responseType:'blob'})\n      )\n      .then(\n        (res)=>{\n          const pdfBlob=new Blob([res.data],{type:'application/pdf'})\n          saveAs(pdfBlob,'newPdf.pdf')\n        }\n      )\n  }\n  onEnterCommand = (event) => {\n    const{command}=this.state\n      if(event.key==='Enter')\n      {\n        if(command!==''){\n          if(command==='sort'){\n            this.setState({command:''})\n            this.sortIt()}\n          else if(command==='help'){\n            this.setState({command:''})\n            this.help()}\n        }\n        else\n          alert(\"Type a Name before hitting 'ENTER'!!\")\n        event.target.value=''\n      }\n    }\n  sortIt=()=>{\n    this.state.counters.sort((a,b)=>{\n      return b.value-a.value\n    })\n  }\n  help(){\n    confirmAlert({\n              title: 'Help Desk',\n              message:[\"Put in your commands to get the result is your way\",\n                      <div style={{'text-align':'left', 'margin':'50px'}}>\n                        <b>COMMANDS</b><br/><br/>\n                        <b>'sort':</b> Sorts the existing data in descending order of Scores<br/><br/>\n                        <b>'top n':</b> Sorts the existing data and shows only the top 'n' participants<br/><br/>\n                       </div>,<br/>,<br/>\n                       ],\n              buttons:[\n                {\n                  label:'OK',\n                  className:'green adj',\n                  onClick: ()=> {\n                    return\n                  }\n                }\n              ]\n    })\n  }\n  filterOut=()=>{\n    const{command}=this.state\n    if(command.startsWith('top')){\n      this.sortIt()\n      const l=parseInt(command.split(' ')[1])\n      if(l<=this.state.counters.length){\n            const stud=this.state.counters.slice(0,l).map(c=>{\n            return c\n          })\n        return stud;\n      }\n      else\n         return this.state.counters;\n    }\n    else{\n      let stud=this.state.counters.filter(c=>\n          c.Name.toLowerCase().startsWith(command)\n      )\n      if(stud.length===0)\n        stud=this.state.counters.filter(c=>\n          c.Name.toLowerCase().includes(command)\n      )\n      return stud;\n    }\n  }\n  check(){\n        if (this.state.counters.length === 0)\n            return 'no-disp';\n        else\n            return 'disp';\n    }\n  controler(){\n    const elm=document.getElementById('conpnl')\n    if(elm.className==='control')\n      elm.className='control-on'\n    else\n      elm.className='control'\n  }\n  registor(){\n    const elm=document.getElementById('rgspnl')\n    if(elm.className==='control')\n      elm.className='control-rg'\n    else\n      elm.className='control'\n  }\n  render(){\n      return (\n        <React.Fragment>\n          <NavBar totalCounters={this.state.counters.length}/>\n          <main className=\"container\">\n            <br/><br/>\n            <button className=\"controler other\" onClick={this.registor}>Register Participants</button>\n            <div id=\"rgspnl\" className=\"control-rg\"><br/>\n              <label>Type Student Names and hit 'ENTER' to <b>Add</b> Participants:</label><br/><br/>\n              <input type='text' className='form-control' \n                  autoFocus={true} \n                  placeholder='Student Name' \n                  onChange={this.onSearch} \n                  onKeyDown={this.onEnter}/>\n            </div>\n            <div id=\"store\" className={this.check()}>\n              <br/><br/>\n              <button className=\"controler other\" onClick={this.controler}>Control Panel</button><br/><br/>\n              <div id=\"conpnl\" className=\"control\">\n                <label>Enter <b>Update</b> Parameters (DEFAULT: 1):</label><br/><br/>\n                <input type='Number' placeholder='Increment By'  onChange={this.onIncChange}/><br/><br/>\n                <input type='Number' placeholder='Decrement By' onChange={this.onDecChange}/><br/><br/>\n                <button className=\"other\" onClick={this.handelSave}>Save</button><br/><br/>\n                <label>Enter <b>Commands</b>:</label>\n                <br/><br/><input type='text' placeholder='Commands'  \n                              onChange={this.onCommand} \n                              onKeyDown={this.onEnterCommand}/>\n              </div><br/><br/><br/><br/>\n              <label>Type Student Names to <b>Search</b> Participants:</label><br/><br/>\n              <input type='text' className='form-control' placeholder='Student Name' onKeyUp={this.onSearchEnter} />\n                    <Counters \n                            counters={this.filterOut()}\n                            onIncrement={this.handelIncrement} \n                            onDecrement={this.handelDecrement} \n                            onReset={this.handelReset}\n                            onDelete={this.handelDelete}\n                            onChangeName={this.handelChangeName}>\n                    </Counters>\n             </div>\n          </main>\n        </React.Fragment>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './mystyle.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <div className='footer'><div>@Soumyanetra</div></div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}